plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.ziguonnana'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    // openvidu server 관련 의존성
    implementation group: 'io.openvidu', name: 'openvidu-java-client', version: '2.30.0'
    // S3 관련 의존성
    // https://mvnrepository.com/artifact/io.awspring.cloud/spring-cloud-aws-starter-s3
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.0'
    // Spring Security OAuth2 클라이언트 관련 의존성
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //ffmpeg 동영상 편집 관련 의존성
    // https://mvnrepository.com/artifact/net.bramp.ffmpeg/ffmpeg
    implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'

    implementation 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5' 
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' 
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}

tasks.named('test') {
    useJUnitPlatform()
}
